---
version: '3'
services:
  # Traefik
  traefik:
    depends_on: [ 'zammad' ]
    restart: on-failure
    image: traefik:v2.4.5
    command: >-
      --entrypoints.web.address=:80 --entrypoints.websecure.address=:443
      --providers.docker --providers.docker.exposedByDefault=false
      --accesslog=true
      --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}
      --certificatesresolvers.letsencrypt.acme.storage=/var/lib/traefik/acme.json
      --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      --certificatesresolvers.letsencrypt.acme.caserver=${LETSENCRYPT_API}
    ports:
    # Web
    - ${HTTP_PORT}:80
    - ${HTTPS_PORT}:443
    volumes:
    - traefik:/var/lib/traefik
    - /var/run/docker.sock:/var/run/docker.sock
    networks:
      frontend: {}
  # Zammad databases
  database:
    restart: on-failure
    image: postgres:13.2
    environment:
      POSTGRES_DB: zammad
      POSTGRES_USER: zammad
      POSTGRES_PASSWORD: zammad
    networks:
      zammad_db: {}
    volumes: [ 'zammad_db:/var/lib/postgresql/data' ]
  elasticsearch:
    restart: on-failure
    build: elasticsearch
    environment:
    - "discovery.type=single-node"
    - "http.max_content_length=400mb"
    - "indices.query.bool.max_clause_count=2000"
    networks:
      zammad_es: {}
    volumes: [ 'zammad_es:/usr/share/elasticsearch/data' ]
  # Zammad
  zammad:
    command: zammad
    depends_on: &zammad-depends-on [ 'database' ]
    restart: &zammad-restart-policy on-failure
    build: &zammad-build-context
      context: ./zammad
      args:
        INSECURE_OPENSSL: '${INSECURE_OPENSSL}'
        RUBY_VERSION: ${RUBY_VERSION}
        ZAMMAD_VERSION: ${ZAMMAD_VERSION}
    environment: &zammad-environment
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: zammad
      DB_PASS: zammad
      ES_SCHEMA: http
      ES_HOST: elasticsearch
      ES_PORT: 9200
      NO_PRECOMPILE_ASSETS: 'y'
    networks: &zammad-networks
      frontend: {}
      zammad_db: {}
      zammad_es: {}
    labels:
    - traefik.enable=true
    - traefik.http.routers.zammad.rule=Host(`${HOST}`)
    - traefik.http.routers.zammad.priority=100
    - traefik.http.services.zammad.loadbalancer.server.port=3000
    - traefik.http.routers.zammad.tls=${ENABLE_TLS}
    - traefik.http.routers.zammad.tls.certresolver=letsencrypt

  zammad-websocket:
    command: websocket
    depends_on: [ 'zammad' ]
    restart: *zammad-restart-policy
    build: *zammad-build-context
    environment: *zammad-environment
    networks: *zammad-networks
    labels:
    - traefik.enable=true
    - traefik.http.routers.zammad-ws.rule=Host(`${HOST}`) && Path(`/ws`)
    - traefik.http.routers.zammad-ws.priority=10
    - traefik.http.services.zammad-ws.loadbalancer.server.port=6042

  zammad-scheduler:
    command: scheduler
    depends_on: [ 'zammad' ]
    restart: *zammad-restart-policy
    build: *zammad-build-context
    environment: *zammad-environment
    networks: *zammad-networks

networks:
  frontend: {}
  zammad_db: {}
  zammad_es: {}

volumes:
  traefik: {}
  zammad_db: {}
  zammad_es: {}
